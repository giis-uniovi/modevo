module RemovePK;
create OUT: DataMigration from LM:Schema, CM:ConceptualModel, CH:SchemaEvolution;

---Rule for copying a table when the PK is removed
rule removePK {
	from
		j: SchemaEvolution!RemovePK 	
		using{
			tableTarget: Schema!Table = Schema!Table.allInstancesFrom('LM') --Main table to get the data is the previous version
			->any (t | t.name = j.previous);
		}
	to
		d: DataMigration!MigrationTable(
			name<- j.table,
			migcol <- tableTarget.Column -> select (c |c.name <> j.columnRemoved) -> collect (c | thisModule.columnMigRemovePK(c, tableTarget, j.previous, j.table))
		)
}
---Details migration for a single column of a copied table
lazy rule columnMigRemovePK{
	from
		column: Schema!Column,
		tableTarget: Schema!Table,
		previous: String,
		nameCurrent: String

	to
		add: DataMigration!MigrationCol ( --for each new column
			MigrateTo <-  thisModule.columnToRemovePKTable (tableTarget, column, nameCurrent),
			MigrateFrom <- thisModule.columnCopyTable (previous, column)
		)	
}
---Defines migration to a table of the given column
lazy rule columnToRemovePKTable {
	from
		tableTarget: Schema!Table,
		r: Schema!Column,
		nameCurrent: String
	to
		MigrateTo: DataMigration!Target (
			Data<- r.name,
			DataTable <- nameCurrent
		)
}
---Defines migration from a table of the given column
lazy rule columnCopyTable {
	from
				previous: String,
				col: Schema!Column
	to
		MigrateFrom: DataMigration!Source (
			Data<- col.name,
			DataTable <- previous
		)
}

